}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[1] #launch share
d_s <- (a$pop[length(a$pop)]-a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s)*p_d)*b$Value
return(s_sp)
}
#Share of Growth
s_g <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[1] #launch share
d_s <- (a$pop[length(a$pop)]-a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t)*p_d)*b$Value
return(s_sp)
}
#Share of Growth
s_g <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[1] #launch share
d_s <- (a$pop[length(a$pop)]-a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t*p_d))*b$Value
return(s_sp)
}
#Share of Growth
s_g <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[1] #launch share
d_s <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t*p_d))*b$Value
return(s_sp)
}
#Share of Growth
s_g <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
#Simple Exponential
s_exp <- function(x, y, t_l, p_d) {
s_e.0 <- lm(log(y[2:length(y)]/log(y[1])) ~ x[2:length(x)])
start <- list(a=exp(coef(s_e.0)[1]), b=coef(s_e.0)[2], c = y[length(y)]*1.5)
s_e.mod <- nls2(y ~ a * exp( b * x ), data = data.frame(y), start = start, algorithm = "brute-force")
s_e.pre <- predict(s_e.mod, newdata = data.frame(x = seq(1,p_d)))
return(s_e.pre)
}
#Simple Geometric
s_g <- function(x, y, t_l, p_d) {
s_ge.0 <- lm((log(y[2:length(y)]-(y[1])) ~ x[2:length(x)]))
start <- list(a=exp(coef(s_ge.0)[1]), b=coef(s_ge.0)[2], c = y[length(y)]*1.5)
s_ge.mod <- nls2(y ~ a * (1 + b)^x + c, data = data.frame(y), start = start, algorithm = "brute-force")
s_ge.pre <- predict(s_ge.mod, newdata = data.frame(x = seq(1,p_d)))
return(s_ge.pre)
}
#Modified Exponential
m_e <- function(x, y, t_l, p_d) {
m_e.0 <- lm(log(y[2:length(y)]/log(y[1])) ~ x[2:length(x)])
start <- list(a=exp(coef(m_e.0)[1]), b=coef(m_e.0)[2], c = y[length(y)]*1.5)
m_e.mod <- nls2(y ~ a * exp( b * x ), data = data.frame(y), start = start, algorithm = "brute-force")
m_e.pre <- predict(m_e.mod, newdata = data.frame(x = seq(1,p_d)))
return(m_e.pre)
}
#Logistic
lo <- function(x, y, t_l, p_d) {
c.0 = 1/(1.5*y[length(y)])
lo.0 <- lm(log((1/y) - c.0) ~ x)
summary(lo.0)
start <- data.frame(a = exp(coef(lo.0)[1]), b = exp(coef(lo.0)[2]), c = c.0)
lo.mod <- nls2(y ~ 1/(c+a*(b^x)), data.frame(y), start = start, algorithm = "brute-force")
lo.pre <- predict(lo.mod, newdata = data.frame(x = seq(1,p_d)))
return(lo.pre)
}
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
#te_sg <- s_g(a, a_j, b)
te_l[length(te_l)]
te_q[length(te_q)]
te_c[length(te_c)]
te_se[length(te_se)]
te_me[length(te_me)]
te_lo[length(te_lo)]
te_cs[length(te_cs)]
te_ss
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)] #launch share
d_s <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t*p_d))*b$Value
return(s_sp)
}
#Share of Growth
s_g <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
#Simple Exponential
s_exp <- function(x, y, t_l, p_d) {
s_e.0 <- lm(log(y[2:length(y)]/log(y[1])) ~ x[2:length(x)])
start <- list(a=exp(coef(s_e.0)[1]), b=coef(s_e.0)[2], c = y[length(y)]*1.5)
s_e.mod <- nls2(y ~ a * exp( b * x ), data = data.frame(y), start = start, algorithm = "brute-force")
s_e.pre <- predict(s_e.mod, newdata = data.frame(x = seq(1,p_d)))
return(s_e.pre)
}
#Simple Geometric
s_g <- function(x, y, t_l, p_d) {
s_ge.0 <- lm((log(y[2:length(y)]-(y[1])) ~ x[2:length(x)]))
start <- list(a=exp(coef(s_ge.0)[1]), b=coef(s_ge.0)[2], c = y[length(y)]*1.5)
s_ge.mod <- nls2(y ~ a * (1 + b)^x + c, data = data.frame(y), start = start, algorithm = "brute-force")
s_ge.pre <- predict(s_ge.mod, newdata = data.frame(x = seq(1,p_d)))
return(s_ge.pre)
}
#Modified Exponential
m_e <- function(x, y, t_l, p_d) {
m_e.0 <- lm(log(y[2:length(y)]/log(y[1])) ~ x[2:length(x)])
start <- list(a=exp(coef(m_e.0)[1]), b=coef(m_e.0)[2], c = y[length(y)]*1.5)
m_e.mod <- nls2(y ~ a * exp( b * x ), data = data.frame(y), start = start, algorithm = "brute-force")
m_e.pre <- predict(m_e.mod, newdata = data.frame(x = seq(1,p_d)))
return(m_e.pre)
}
#Logistic
lo <- function(x, y, t_l, p_d) {
c.0 = 1/(1.5*y[length(y)])
lo.0 <- lm(log((1/y) - c.0) ~ x)
summary(lo.0)
start <- data.frame(a = exp(coef(lo.0)[1]), b = exp(coef(lo.0)[2]), c = c.0)
lo.mod <- nls2(y ~ 1/(c+a*(b^x)), data.frame(y), start = start, algorithm = "brute-force")
lo.pre <- predict(lo.mod, newdata = data.frame(x = seq(1,p_d)))
return(lo.pre)
}
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)] #launch share
d_s <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t*p_d))*b$Value
return(s_sp)
}
#Share of Growth
s_gr <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
#te_sgr <- s_g(a, a_j, b)
te_l[length(te_l)]
te_q[length(te_q)]
te_c[length(te_c)]
te_se[length(te_se)]
te_me[length(te_me)]
te_lo[length(te_lo)]
te_cs[length(te_cs)]
te_ss
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
te_sgr <- s_g(a, a_j, b)
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)] #launch share
d_s <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t*p_d))*b$Value
return(s_sp)
}
#Share of Growth
s_gr <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- tail(a$pop) + (d_i/d_j)*(d_t)
return(s_gp)
}
#Simple Exponential
s_exp <- function(x, y, t_l, p_d) {
s_e.0 <- lm(log(y[2:length(y)]/log(y[1])) ~ x[2:length(x)])
start <- list(a=exp(coef(s_e.0)[1]), b=coef(s_e.0)[2], c = y[length(y)]*1.5)
s_e.mod <- nls2(y ~ a * exp( b * x ), data = data.frame(y), start = start, algorithm = "brute-force")
s_e.pre <- predict(s_e.mod, newdata = data.frame(x = seq(1,p_d)))
return(s_e.pre)
}
#Simple Geometric
s_g <- function(x, y, t_l, p_d) {
s_ge.0 <- lm((log(y[2:length(y)]-(y[1])) ~ x[2:length(x)]))
start <- list(a=exp(coef(s_ge.0)[1]), b=coef(s_ge.0)[2], c = y[length(y)]*1.5)
s_ge.mod <- nls2(y ~ a * (1 + b)^x + c, data = data.frame(y), start = start, algorithm = "brute-force")
s_ge.pre <- predict(s_ge.mod, newdata = data.frame(x = seq(1,p_d)))
return(s_ge.pre)
}
#Modified Exponential
m_e <- function(x, y, t_l, p_d) {
m_e.0 <- lm(log(y[2:length(y)]/log(y[1])) ~ x[2:length(x)])
start <- list(a=exp(coef(m_e.0)[1]), b=coef(m_e.0)[2], c = y[length(y)]*1.5)
m_e.mod <- nls2(y ~ a * exp( b * x ), data = data.frame(y), start = start, algorithm = "brute-force")
m_e.pre <- predict(m_e.mod, newdata = data.frame(x = seq(1,p_d)))
return(m_e.pre)
}
#Logistic
lo <- function(x, y, t_l, p_d) {
c.0 = 1/(1.5*y[length(y)])
lo.0 <- lm(log((1/y) - c.0) ~ x)
summary(lo.0)
start <- data.frame(a = exp(coef(lo.0)[1]), b = exp(coef(lo.0)[2]), c = c.0)
lo.mod <- nls2(y ~ 1/(c+a*(b^x)), data.frame(y), start = start, algorithm = "brute-force")
lo.pre <- predict(lo.mod, newdata = data.frame(x = seq(1,p_d)))
return(lo.pre)
}
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
te_sgr <- s_g(a, a_j, b)
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
te_sgr <- s_gr(a, a_j, b)
te_l[length(te_l)]
te_q[length(te_q)]
te_c[length(te_c)]
te_se[length(te_se)]
te_me[length(te_me)]
te_lo[length(te_lo)]
te_cs[length(te_cs)]
te_ss
te_sgr
#Constant Share
c_s <- function(a, a_j, b) {
c_sp <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])*b$Value
return(c_sp)
}
#Shift Share
s_s <- function (a, a_j, b, p_d){
s_l <- a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)] #launch share
d_s <- (a$pop[length(a$pop)]/a_j$pop[length(a_j$pop)])-(a$pop[1]/a_j$pop[1]) #difference of share
i_t <- 1/a$year[length(a$year)] #1/time
s_sp <- (s_l+(d_s*i_t*p_d))*b$Value
return(s_sp)
}
#Share of Growth
s_gr <- function (a, a_j, b){
d_i <- a$pop[length(a$pop)] - a$pop[1]
d_j <- a_j$pop[length(a_j$pop)] - a_j$pop[1]
d_t <- b$Value - a_j$pop[length(a_j$pop)]
s_gp <- a$pop[length(a$pop)] + (d_i/d_j)*(d_t)
return(s_gp)
}
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
te_sgr <- s_gr(a, a_j, b)
te_l[length(te_l)]
te_q[length(te_q)]
te_c[length(te_c)]
te_se[length(te_se)]
te_me[length(te_me)]
te_lo[length(te_lo)]
te_cs[length(te_cs)]
te_ss
te_sgr
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_q <- quad_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_c <- cube_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_se <- s_exp(a$year, a$pop, a$year[length(a$year)], 10)
te_sg <- s_g(a$year, a$pop, a$year[length(a$year)], 10)
te_me <- m_e(a$year, a$pop, a$year[length(a$year)], 10)
te_lo <- lo(a$year, a$pop, a$year[length(a$year)], 10)
te_cs <- c_s(a, a_j, b)
te_ss <- s_s(a, a_j, b, 10)
te_sgr <- s_gr(a, a_j, b)
te_l[length(te_l)]
te_q[length(te_q)]
te_c[length(te_c)]
te_se[length(te_se)]
te_me[length(te_me)]
te_lo[length(te_lo)]
te_cs[length(te_cs)]
te_ss
te_sgr
source('P:/cp6024/assignment_2/app_temp.R', echo=TRUE)
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
ggplot(a, aes(a$year, a$pop))
ggplot(a, aes(a$year, a$pop)) + geom_point(aes(size = a$pop))
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
source('P:/cp6024/assignment_2/proj_methods.R', echo=TRUE)
runApp('app_temp.R')
source('P:/cp6024/assignment_2/proj_methods.R', echo=TRUE)
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
df.20 <- data.frame(rbind(
c(Class = "Linear Models", Method = "Linear", Projection = linear_proj(a$year, a$pop, a$year[length(a$year)], 10)),
c(Class = "Linear Models", Method = "Quadratic", Projection = quad_proj(a$year, a$pop, a$year[length(a$year)], 10)),
c(Class = "Linear Models", Method = "Cubic", Projection = cube_proj(a$year, a$pop, a$year[length(a$year)], 10)),
c(Class = "Non-Linear Models", Method = "Simple Exponential", Projection = s_exp(a$year, a$pop, a$year[length(a$year)], 10)),
c(Class = "Non-Linear Models", Method = "Simple Geometric", Projection = s_g(a$year, a$pop, a$year[length(a$year)], 10)),
c(Class = "Non-Linear Models", Method = "Logistic", Projection = lo(a$year, a$pop, a$year[length(a$year)], 10)),
c(Class = "Ratio Forecast", Method = "Constant Share", Projection = c_s(a, a_j, b.10)),
c(Class = "Ratio Forecast", Method = "Shift Share", Projection = s_s(a, a_j, b.10, 10)),
c(Class = "Ratio Forecast", Method = "Growth Share", Projection = s_gr(a, a_j, b.10))
)
)
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
?reactive
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
?eventReactive
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp()
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
runApp('app_temp.R')
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
plot(m)
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
plot(fitted(m))
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
plot(fitted(predict(m,newdata = data.frame(x = seq(22,44)))))
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
predict(m,newdata = data.frame(x = seq(22,44)))
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
predict(m,newdata = data.frame(x = seq(1,40)))
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
q <- data.frame(predict(m,newdata = data.frame(x = seq(1,40))))
q
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(2,4,6,8,10,12,14,16,18,20)
m <- lm(y ~ x)
m
ggplot(data = predict(m,newdata = data.frame(x = seq(1,40))))
runApp('app_temp.R')
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
te_l <- linear_proj(a$year, a$pop, a$year[length(a$year)], 10)
runApp('app_temp.R')
runApp('app_temp.R')
